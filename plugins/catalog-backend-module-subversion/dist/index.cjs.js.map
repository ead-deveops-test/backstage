{"version":3,"file":"index.cjs.js","sources":["../src/entities.ts","../src/module.ts"],"sourcesContent":["import { exec } from 'child_process';\r\nimport { readFile } from 'fs';\r\n// @ts-ignore\r\nimport nodePandoc from 'node-pandoc';\r\n\r\nexport async function getEntitiesByAll(\r\n    catalogNames: string[],\r\n    subversionBaseUrl: string,\r\n    subversionAuthtoken: string,\r\n    subversionUsername: string,\r\n    subversionPassword: string,\r\n    subversionDirectory: string,\r\n    redmineBaseUrl: string,\r\n    redmineProject: string,\r\n    redmineApiKey: string,\r\n    generateDocsScriptPath: string) {\r\n    const promises = catalogNames.map(async item => {\r\n        console.log(item)\r\n        if (item != '../' && item != 'http://subversion.apache.org/') {\r\n            try {\r\n                item = item.substring(0, item.length - 1);\r\n                const catalogFetchResponse = await fetch(`${subversionBaseUrl}/${item}/catalog-info.json`, { headers: { 'Authorization': subversionAuthtoken } })\r\n                if (catalogFetchResponse.ok) {\r\n                    const catalogData = await catalogFetchResponse.json();\r\n                    console.log(`REDMINE_WIKI_URL: ${redmineBaseUrl}/projects/${redmineProject}/wiki/${item}.json`);\r\n\r\n                    if (Object.keys(catalogData.metadata.annotations).includes(\"backstage.io/techdocs-ref\")) {\r\n                        let script = String.raw`${generateDocsScriptPath} ${item} ${subversionUsername} ${subversionPassword} ${subversionBaseUrl} ${subversionDirectory}`;\r\n                        exec(script, async (error, stdout, stderr) => {\r\n                            if (error) {\r\n                                console.log(`error: ${error.message}`);\r\n                                return;\r\n                            }\r\n                            if (stderr) {\r\n                                console.log(`stderr: ${stderr}`);\r\n                                return;\r\n                            }\r\n                            console.log(`stdout: ${stdout}`);\r\n                            let docFilePath = `${subversionDirectory}\\\\${item}\\\\docs\\\\index.md`;\r\n                            readFile(docFilePath, 'utf-8', async (err, data) => {\r\n                                if (err) {\r\n                                    console.log(`error: ${err.message}`);\r\n                                    return;\r\n                                }\r\n                                if (data) {\r\n                                    console.log(\"Inside readfile\", item);\r\n                                    let args = `-f markdown -t textile`;\r\n                                    nodePandoc(data, args, async (err: any, result: any) => {\r\n                                        if (err) {\r\n                                            console.log(`error: ${err.message}`);\r\n                                            return;\r\n                                        }\r\n                                        console.log(result)\r\n                                        const response = await fetch(\r\n                                            `${redmineBaseUrl}/projects/${redmineProject}/wiki/${item}.json`,\r\n                                            {\r\n                                                method: 'PUT',\r\n                                                headers: {\r\n                                                    'X-Redmine-API-Key': redmineApiKey,\r\n                                                    'Content-Type': 'application/json'\r\n                                                },\r\n                                                body: JSON.stringify({\r\n                                                    \"wiki_page\": {\r\n                                                        \"text\": result\r\n                                                    }\r\n                                                })\r\n                                            }\r\n                                        )\r\n                                        const catalogsHtml = await response;\r\n                                        console.log('REDMINE', catalogsHtml);\r\n                                    });\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                    return catalogData;\r\n                } else {\r\n                    console.error(`Error fetching ${item}: ${catalogFetchResponse.statusText}`);\r\n                    return;\r\n                    // throw new Error(`Error fetching ${item}: ${catalogFetchResponse.statusText}`);\r\n                }\r\n\r\n            } catch (error: any) {\r\n                console.error(`Error processing ${item}: ${error.message}`);\r\n                return;\r\n                // throw error;\r\n            }\r\n        }\r\n    });\r\n    try {\r\n        var results = await Promise.all(promises);\r\n        results = results.filter((element) => {\r\n            return element !== undefined;\r\n        });\r\n        return results;\r\n    } catch (error: any) {\r\n        console.error(`Error fetching entities: ${error.message}`);\r\n        return;\r\n        // throw error;\r\n    }\r\n}\r\n","// import { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { Config } from '@backstage/config';\nimport { getEntitiesByAll } from \"./entities\";\n\n/**\n * Provides entities from fictional frobs service.\n */\nexport class SubversionProvider implements EntityProvider {\n  private readonly env: string;\n  // private readonly reader: UrlReader;\n  private readonly config: Config;\n  private connection?: EntityProviderConnection;\n\n  /** [1] */\n  constructor(env: string, config: Config) {\n    this.env = env;\n    // this.reader = reader;\n    this.config = config;\n  }\n\n  /** [2] */\n  getProviderName(): string {\n    return `subversion-${this.env}`;\n  }\n\n  /** [3] */\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this.connection = connection;\n  }\n\n  /** [4] */\n  async run(): Promise<void> {\n    if (!this.connection) {\n      throw new Error('Not initialized');\n    }\n\n    var entitiesFromSubversion: Entity[] = [];\n    // const subversionDetails: any = this.config.getOptionalConfigArray('integrations.subversion')!;\n    const subversionBaseUrl: any = this.config.getOptionalString('integrations.subversion.baseUrl');\n    const subversionAuthtoken: any = this.config.getOptionalString('integrations.subversion.authorizationToken');\n    const subversionUsername: any = this.config.getOptionalString('integrations.subversion.username');\n    const subversionPassword: any = this.config.getOptionalString('integrations.subversion.password');\n    const subversionDirectory: any = this.config.getOptionalString('integrations.subversion.localDirectory');\n    const redmineBaseUrl: any = this.config.getOptionalString('integrations.redmine.baseUrl');\n    const redmineProject: any = this.config.getOptionalString('integrations.redmine.project');\n    const redmineApiKey: any = this.config.getOptionalString('integrations.redmine.apiKey');\n    const generateDocsScriptPath: any = this.config.getOptionalString('integrations.subversion.generateDocsScriptPath');\n\n\n    const response = await fetch(subversionBaseUrl, { headers: { 'Authorization': subversionAuthtoken } })\n    const catalogsHtml = await response.text();\n    const regex = /<a[^>]*href=\"([^\"]*\\/)\"[^>]*>(.*?)<\\/a>/g;\n    let extractedStrings = [];\n    let match;\n    while ((match = regex.exec(catalogsHtml)) !== null) {\n      extractedStrings.push(match[1]);\n    }\n\n    const catalogInfos = await getEntitiesByAll(extractedStrings, subversionBaseUrl, subversionAuthtoken, subversionUsername, subversionPassword, subversionDirectory, redmineBaseUrl, redmineProject, redmineApiKey, generateDocsScriptPath);\n    catalogInfos?.map(element => {\n      let elm: Entity = element;\n      entitiesFromSubversion.push(elm);\n    });\n\n    /** [5] */\n    const entity1: Entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Component',\n      spec: {\n        type: 'service',\n        lifecycle: 'experimental',\n        owner: 'team-a'\n      },\n      metadata: {\n        name: 'entity-1',\n        annotations: {\n          'backstage.io/managed-by-location': 'url:https://github.com/backstage/backstage/tree/master/.github',\n          'backstage.io/managed-by-origin-location': 'url:https://github.com/backstage/backstage/tree/master/.github',\n        }\n      }\n    };\n    const entity2: Entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Component',\n      spec: {\n        type: 'service',\n        lifecycle: 'experimental',\n        owner: 'team-a'\n      },\n      metadata: {\n        name: 'entity-2',\n        annotations: {\n          'backstage.io/managed-by-location': 'url:https://github.com/backstage/backstage/tree/master/.github',\n          'backstage.io/managed-by-origin-location': 'url:https://github.com/backstage/backstage/tree/master/.github',\n        }\n      }\n    };\n    const entities: Entity[] = entitiesFromSubversion != undefined ? entitiesFromSubversion : [entity1, entity2];\n\n    /** [6] */\n    await this.connection.applyMutation({\n      type: 'full',\n      entities: entities.map(entity => ({\n        entity,\n        locationKey: `subversion-provider:${this.env}`,\n      })),\n    });\n  }\n}"],"names":["exec","readFile","nodePandoc","err"],"mappings":"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"}