{"version":3,"file":"index.cjs.js","sources":["../src/plugins/app.ts","../src/plugins/auth.ts","../src/plugins/catalog.ts","../src/plugins/scaffolder/actions/custom.ts","../src/plugins/scaffolder.ts","../src/plugins/proxy.ts","../src/plugins/techdocs.ts","../src/plugins/search.ts","../src/index.ts"],"sourcesContent":["import { createRouter } from '@backstage/plugin-app-backend';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  return await createRouter({\n    logger: env.logger,\n    config: env.config,\n    database: env.database,\n    appPackageName: 'app',\n  });\n}\n","import {\n  createRouter,\n  providers,\n  defaultAuthProviderFactories,\n} from '@backstage/plugin-auth-backend';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  return await createRouter({\n    logger: env.logger,\n    config: env.config,\n    database: env.database,\n    discovery: env.discovery,\n    tokenManager: env.tokenManager,\n    providerFactories: {\n      ...defaultAuthProviderFactories,\n\n      // This replaces the default GitHub auth provider with a customized one.\n      // The `signIn` option enables sign-in for this provider, using the\n      // identity resolution logic that's provided in the `resolver` callback.\n      //\n      // This particular resolver makes all users share a single \"guest\" identity.\n      // It should only be used for testing and trying out Backstage.\n      //\n      // If you want to use a production ready resolver you can switch to\n      // the one that is commented out below, it looks up a user entity in the\n      // catalog using the GitHub username of the authenticated user.\n      // That resolver requires you to have user entities populated in the catalog,\n      // for example using https://backstage.io/docs/integrations/github/org\n      //\n      // There are other resolvers to choose from, and you can also create\n      // your own, see the auth documentation for more details:\n      //\n      //   https://backstage.io/docs/auth/identity-resolver\n      github: providers.github.create({\n        signIn: {\n          resolver(_, ctx) {\n            const userRef = 'user:default/guest'; // Must be a full entity reference\n            return ctx.issueToken({\n              claims: {\n                sub: userRef, // The user's own identity\n                ent: [userRef], // A list of identities that the user claims ownership through\n              },\n            });\n          },\n          // resolver: providers.github.resolvers.usernameMatchingUserEntityName(),\n        },\n      }),\n    },\n  });\n}\n","import { CatalogBuilder } from '@backstage/plugin-catalog-backend';\nimport { ScaffolderEntitiesProcessor } from '@backstage/plugin-catalog-backend-module-scaffolder-entity-model';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\nimport { SubversionProvider } from \"@internal/plugin-catalog-backend-module-subversion\";\n\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  const builder = await CatalogBuilder.create(env);\n  builder.addProcessor(new ScaffolderEntitiesProcessor());\n  const subversion = new SubversionProvider('production', env.config);\n  builder.addEntityProvider(subversion);\n  const { processingEngine, router } = await builder.build();\n  await processingEngine.start();\n  await env.scheduler.scheduleTask({\n    id: 'run_subversion_refresh',\n    fn: async () => {\n      await subversion.run();\n    },\n    frequency: { minutes: 1 },\n    timeout: { minutes: 1 },\n  });\n  return router;\n}\n","import { createTemplateAction } from '@backstage/plugin-scaffolder-node';\r\nimport { exec } from 'child_process';\r\nimport { Config } from '@backstage/config';\r\nimport { readFile } from 'fs';\r\n// @ts-ignore\r\nimport nodePandoc from 'node-pandoc';\r\n\r\n// const getRepoName = (svnHost: String) => {\r\n//     let words = svnHost.split('/').filter(s => s);\r\n//     return words[words.length - 1];\r\n// };\r\n\r\nexport const subversionCreateAction = ({ config }: {\r\n    config: Config;\r\n}) => {\r\n    return createTemplateAction<{\r\n        // svnServerUrl: string;\r\n        // username: string;\r\n        // password: string;\r\n        name: string;\r\n        moduleName: string;\r\n        modality: string;\r\n        bodyParts: string;\r\n        processingPurpose: string;\r\n        protocol: string;\r\n        algorithmType: string;\r\n        packageType: string;\r\n        supportedOs: string;\r\n        developmentStatus: string;\r\n        linkToProjectPage: string;\r\n    }>({\r\n        id: 'subversion:create',\r\n        description: 'Create an SVN repository',\r\n        async handler(ctx) {\r\n            const svnHost = config.getOptionalString('integrations.subversion.baseUrl');\r\n            const username = config.getOptionalString('integrations.subversion.username');\r\n            const password = config.getOptionalString('integrations.subversion.password');\r\n            const repoName = config.getOptionalString('integrations.subversion.mainRepoName');\r\n            const subRepoName = ctx.input.name;\r\n            const commitMessage = 'Initial Commit';\r\n            const workingDir = config.getOptionalString('integrations.subversion.localDirectory');\r\n            const redmineBaseUrl = config.getOptionalString('integrations.redmine.baseUrl');\r\n            const redmineProject = config.getOptionalString('integrations.redmine.project');\r\n            const redmineApiKey = config.getOptionalString('integrations.redmine.apiKey');\r\n\r\n            console.log('redmineBaseUrl', redmineBaseUrl);\r\n            console.log('redmineProject', redmineProject);\r\n            console.log('redmineApiKey', redmineApiKey);\r\n            console.log('server url', svnHost);\r\n            console.log('username', username);\r\n            console.log('password', password);\r\n\r\n            console.log('name', ctx.input.name);\r\n            console.log('moduleName', ctx.input.moduleName);\r\n            console.log('modality', ctx.input.modality);\r\n            console.log('bodyParts', ctx.input.bodyParts);\r\n            console.log('processingPurpose', ctx.input.processingPurpose);\r\n            console.log('protocol', ctx.input.protocol);\r\n            console.log('algorithmType', ctx.input.algorithmType);\r\n            console.log('packageType', ctx.input.packageType);\r\n            console.log('supportedOs', ctx.input.supportedOs);\r\n            console.log('developmentStatus', ctx.input.developmentStatus);\r\n            console.log('linkToProjectPage', ctx.input.linkToProjectPage);\r\n\r\n            const repoCreateScriptPath = config.getOptionalString('integrations.subversion.createScriptPath');\r\n            const script = String.raw`${repoCreateScriptPath} ${workingDir} ${svnHost} ${username} ${password} ${repoName} ${subRepoName} ${commitMessage}  ${ctx.input.moduleName} ${ctx.input.modality} ${ctx.input.bodyParts} ${ctx.input.processingPurpose} ${ctx.input.protocol} ${ctx.input.algorithmType} ${ctx.input.packageType} ${ctx.input.supportedOs} ${ctx.input.developmentStatus} ${ctx.input.linkToProjectPage}`\r\n            console.log(script);\r\n\r\n            exec(script, async (error, stdout, stderr) => {\r\n                if (error) {\r\n                    console.log(`error: ${error.message}`);\r\n                    return;\r\n\r\n                }\r\n                if (stderr) {\r\n                    console.log(`stderr: ${stderr}`);\r\n                    return;\r\n                }\r\n                console.log(`stdout: ${stdout}`);\r\n                if (redmineBaseUrl && redmineProject && redmineApiKey) {\r\n                    console.log(`${redmineBaseUrl}/projects/${redmineProject}/wiki/${subRepoName}.json`);\r\n                    let filePath = `${workingDir}\\\\${subRepoName}\\\\docs\\\\index.md`;\r\n                    readFile(filePath, 'utf-8', async (err, data) => {\r\n                        if (err) {\r\n                            console.log(`error: ${err.message}`);\r\n                            return;\r\n                        }\r\n                        if (data) {\r\n                            let args = `-f markdown -t textile`;\r\n                            nodePandoc(data, args, async (err: any, result: any) => {\r\n                                if (err) {\r\n                                    console.log(`error: ${err.message}`);\r\n                                    return;\r\n                                }\r\n                                console.log(result)\r\n                                const response = await fetch(\r\n                                    `${redmineBaseUrl}/projects/${redmineProject}/wiki/${subRepoName}.json`,\r\n                                    {\r\n                                        method: 'PUT',\r\n                                        headers: {\r\n                                            'X-Redmine-API-Key': redmineApiKey,\r\n                                            'Content-Type': 'application/json'\r\n                                        },\r\n                                        body: JSON.stringify({\r\n                                            \"wiki_page\": {\r\n                                                \"text\": result\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                )\r\n                                const catalogsHtml = await response;\r\n                                console.log('REDMINE', catalogsHtml);\r\n                            });\r\n\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        },\r\n    });\r\n};","import { CatalogClient } from '@backstage/catalog-client';\nimport { createRouter } from '@backstage/plugin-scaffolder-backend';\nimport { Router } from 'express';\nimport type { PluginEnvironment } from '../types';\nimport { createBuiltinActions } from '@backstage/plugin-scaffolder-backend';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { subversionCreateAction } from './scaffolder/actions/custom';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  const catalogClient = new CatalogClient({\n    discoveryApi: env.discovery,\n  });\n  const integrations = ScmIntegrations.fromConfig(env.config);\n\n  const builtInActions = createBuiltinActions({\n    integrations,\n    catalogClient,\n    config: env.config,\n    reader: env.reader,\n  });\n\n  const actions = [...builtInActions, subversionCreateAction({ config: env.config })];\n\n  return await createRouter({\n    actions,\n    logger: env.logger,\n    config: env.config,\n    database: env.database,\n    reader: env.reader,\n    catalogClient,\n    identity: env.identity,\n    permissions: env.permissions,\n  });\n}\n","import { createRouter } from '@backstage/plugin-proxy-backend';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  return await createRouter({\n    logger: env.logger,\n    config: env.config,\n    discovery: env.discovery,\n  });\n}\n","import { DockerContainerRunner } from '@backstage/backend-common';\nimport {\n  createRouter,\n  Generators,\n  Preparers,\n  Publisher,\n} from '@backstage/plugin-techdocs-backend';\nimport Docker from 'dockerode';\nimport { Router } from 'express';\nimport { PluginEnvironment } from '../types';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  // Preparers are responsible for fetching source files for documentation.\n  const preparers = await Preparers.fromConfig(env.config, {\n    logger: env.logger,\n    reader: env.reader,\n  });\n\n  // Docker client (conditionally) used by the generators, based on techdocs.generators config.\n  const dockerClient = new Docker();\n  const containerRunner = new DockerContainerRunner({ dockerClient });\n\n  // Generators are used for generating documentation sites.\n  const generators = await Generators.fromConfig(env.config, {\n    logger: env.logger,\n    containerRunner,\n  });\n\n  // Publisher is used for\n  // 1. Publishing generated files to storage\n  // 2. Fetching files from storage and passing them to TechDocs frontend.\n  const publisher = await Publisher.fromConfig(env.config, {\n    logger: env.logger,\n    discovery: env.discovery,\n  });\n\n  // checks if the publisher is working and logs the result\n  await publisher.getReadiness();\n\n  return await createRouter({\n    preparers,\n    generators,\n    publisher,\n    logger: env.logger,\n    config: env.config,\n    discovery: env.discovery,\n    cache: env.cache,\n  });\n}\n","import { useHotCleanup } from '@backstage/backend-common';\nimport { createRouter } from '@backstage/plugin-search-backend';\nimport {\n  IndexBuilder,\n  LunrSearchEngine,\n} from '@backstage/plugin-search-backend-node';\nimport { PluginEnvironment } from '../types';\nimport { DefaultCatalogCollatorFactory } from '@backstage/plugin-search-backend-module-catalog';\nimport { DefaultTechDocsCollatorFactory } from '@backstage/plugin-search-backend-module-techdocs';\nimport { Router } from 'express';\n\nexport default async function createPlugin(\n  env: PluginEnvironment,\n): Promise<Router> {\n  // Initialize a connection to a search engine.\n  const searchEngine = new LunrSearchEngine({\n    logger: env.logger,\n  });\n  const indexBuilder = new IndexBuilder({\n    logger: env.logger,\n    searchEngine,\n  });\n\n  const schedule = env.scheduler.createScheduledTaskRunner({\n    frequency: { minutes: 10 },\n    timeout: { minutes: 15 },\n    // A 3 second delay gives the backend server a chance to initialize before\n    // any collators are executed, which may attempt requests against the API.\n    initialDelay: { seconds: 3 },\n  });\n\n  // Collators are responsible for gathering documents known to plugins. This\n  // collator gathers entities from the software catalog.\n  indexBuilder.addCollator({\n    schedule,\n    factory: DefaultCatalogCollatorFactory.fromConfig(env.config, {\n      discovery: env.discovery,\n      tokenManager: env.tokenManager,\n    }),\n  });\n\n  // collator gathers entities from techdocs.\n  indexBuilder.addCollator({\n    schedule,\n    factory: DefaultTechDocsCollatorFactory.fromConfig(env.config, {\n      discovery: env.discovery,\n      logger: env.logger,\n      tokenManager: env.tokenManager,\n    }),\n  });\n\n  // The scheduler controls when documents are gathered from collators and sent\n  // to the search engine for indexing.\n  const { scheduler } = await indexBuilder.build();\n  scheduler.start();\n\n  useHotCleanup(module, () => scheduler.stop());\n\n  return await createRouter({\n    engine: indexBuilder.getSearchEngine(),\n    types: indexBuilder.getDocumentTypes(),\n    permissions: env.permissions,\n    config: env.config,\n    logger: env.logger,\n  });\n}\n","/*\n * Hi!\n *\n * Note that this is an EXAMPLE Backstage backend. Please check the README.\n *\n * Happy hacking!\n */\n\nimport Router from 'express-promise-router';\nimport {\n  createServiceBuilder,\n  loadBackendConfig,\n  getRootLogger,\n  useHotMemoize,\n  notFoundHandler,\n  CacheManager,\n  DatabaseManager,\n  HostDiscovery,\n  UrlReaders,\n  ServerTokenManager,\n} from '@backstage/backend-common';\nimport { TaskScheduler } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport app from './plugins/app';\nimport auth from './plugins/auth';\nimport catalog from './plugins/catalog';\nimport scaffolder from './plugins/scaffolder';\nimport proxy from './plugins/proxy';\nimport techdocs from './plugins/techdocs';\nimport search from './plugins/search';\nimport { PluginEnvironment } from './types';\nimport { ServerPermissionClient } from '@backstage/plugin-permission-node';\nimport { DefaultIdentityClient } from '@backstage/plugin-auth-node';\n\nfunction makeCreateEnv(config: Config) {\n  const root = getRootLogger();\n  const reader = UrlReaders.default({ logger: root, config });\n  const discovery = HostDiscovery.fromConfig(config);\n  const cacheManager = CacheManager.fromConfig(config);\n  const databaseManager = DatabaseManager.fromConfig(config, { logger: root });\n  const tokenManager = ServerTokenManager.noop();\n  const taskScheduler = TaskScheduler.fromConfig(config, { databaseManager });\n\n  const identity = DefaultIdentityClient.create({\n    discovery,\n  });\n  const permissions = ServerPermissionClient.fromConfig(config, {\n    discovery,\n    tokenManager,\n  });\n\n  root.info(`Created UrlReader ${reader}`);\n\n  return (plugin: string): PluginEnvironment => {\n    const logger = root.child({ type: 'plugin', plugin });\n    const database = databaseManager.forPlugin(plugin);\n    const cache = cacheManager.forPlugin(plugin);\n    const scheduler = taskScheduler.forPlugin(plugin);\n    return {\n      logger,\n      database,\n      cache,\n      config,\n      reader,\n      discovery,\n      tokenManager,\n      scheduler,\n      permissions,\n      identity,\n    };\n  };\n}\n\nasync function main() {\n  const config = await loadBackendConfig({\n    argv: process.argv,\n    logger: getRootLogger(),\n  });\n  const createEnv = makeCreateEnv(config);\n\n  const catalogEnv = useHotMemoize(module, () => createEnv('catalog'));\n  const scaffolderEnv = useHotMemoize(module, () => createEnv('scaffolder'));\n  const authEnv = useHotMemoize(module, () => createEnv('auth'));\n  const proxyEnv = useHotMemoize(module, () => createEnv('proxy'));\n  const techdocsEnv = useHotMemoize(module, () => createEnv('techdocs'));\n  const searchEnv = useHotMemoize(module, () => createEnv('search'));\n  const appEnv = useHotMemoize(module, () => createEnv('app'));\n\n  const apiRouter = Router();\n  apiRouter.use('/catalog', await catalog(catalogEnv));\n  apiRouter.use('/scaffolder', await scaffolder(scaffolderEnv));\n  apiRouter.use('/auth', await auth(authEnv));\n  apiRouter.use('/techdocs', await techdocs(techdocsEnv));\n  apiRouter.use('/proxy', await proxy(proxyEnv));\n  apiRouter.use('/search', await search(searchEnv));\n\n  // Add backends ABOVE this line; this 404 handler is the catch-all fallback\n  apiRouter.use(notFoundHandler());\n\n  const service = createServiceBuilder(module)\n    .loadConfig(config)\n    .addRouter('/api', apiRouter)\n    .addRouter('', await app(appEnv));\n\n  await service.start().catch(err => {\n    console.log(err);\n    process.exit(1);\n  });\n}\n\nmodule.hot?.accept();\nmain().catch(error => {\n  console.error('Backend failed to start up', error);\n  process.exit(1);\n});\n"],"names":["createPlugin","createRouter","defaultAuthProviderFactories","providers","CatalogBuilder","ScaffolderEntitiesProcessor","SubversionProvider","createTemplateAction","exec","readFile","nodePandoc","err","catalogClient","CatalogClient","ScmIntegrations","createBuiltinActions","Preparers","Docker","DockerContainerRunner","Generators","Publisher","LunrSearchEngine","IndexBuilder","DefaultCatalogCollatorFactory","DefaultTechDocsCollatorFactory","useHotCleanup","getRootLogger","UrlReaders","HostDiscovery","CacheManager","DatabaseManager","ServerTokenManager","TaskScheduler","DefaultIdentityClient","ServerPermissionClient","loadBackendConfig","useHotMemoize","Router","catalog","scaffolder","auth","techdocs","proxy","search","notFoundHandler","createServiceBuilder","app"],"mappings":"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"}